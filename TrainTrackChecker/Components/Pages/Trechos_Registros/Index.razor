@page "/trechosregistros"
@using TrainTrackChecker.Components.Pages.Trechos
@inject IDialogService dialogService
@inject IApiService<Trecho_Registro> itemService
@inject IApiService<Trecho> itemServiceTrecho
@inject NavigationManager navigationManager

@if (items != default!) {
    <FluentButton Appearance="Appearance.Accent" style="margin-bottom:10px"
                  IconStart="@(new Icons.Regular.Size16.Add())"
                  OnClick="@(() => AddDialog())">@AddNewButtonText &nbsp;&nbsp;</FluentButton>
    <div style="display: table; table-layout: fixed; width: 100%;">
        <div style="overflow-x: auto;">

            <Grid TItem="Trecho_Registro"
                  Class="table table-hover table-bordered table-striped"
                  Data="items"
                  Style="font-size: 12px;"
                  AllowSorting="true"
                  AllowRowClick="true"
                  OnRowClick="OnRowClick"
                  AllowPaging="true"
                  PageSize="15"
                  AutoHidePaging="true"
                  PageSizeSelectorVisible="true"
                  PageSizeSelectorItems="@(new int[] { 15, 50, 100 })"
                  PaginationItemsTextFormat=""
                  ItemsPerPageText=""
                  AllowSelection="false"
                  EmptyText="Nenhum registro para exibir."
                  Responsive="true">

                <GridColumns>

                    <GridColumn TItem="Trecho_Registro" HeaderText="Código do Trecho" PropertyName="Código do Trecho" TextNoWrap="true"
                                TextAlignment="Alignment.Center"  SortKeySelector="c => ((c.Trecho == null) ? null : c.Trecho.Codigo)">
                        @context.Trecho?.Codigo
                    </GridColumn>
                    <GridColumn TItem="Trecho_Registro" HeaderText="Data/Hora do Registro" PropertyName="Data/Hora do Registro" TextNoWrap="true"
                                SortKeySelector="c => c.DataHora">
                        @Helpers.DateTimeToLongString(context.DataHora)
                    </GridColumn>
                    <GridColumn TItem="Trecho_Registro" HeaderText="Distância da leitura (mm)" PropertyName="Distância da leitura (mm)" TextNoWrap="true"
                                SortKeySelector="c => c.DistanciaMM">
                        @context.DistanciaMM
                    </GridColumn>
                    <GridColumn TItem="Trecho_Registro" HeaderText="Coordenada Geográfica" PropertyName="Coordenada Geográfica" TextNoWrap="true"
                                SortKeySelector="c => c.Coordenada">
                        @context.Coordenada
                    </GridColumn>
                    <GridColumn TItem="Trecho_Registro" HeaderText="Verificado" PropertyName="Verificado" TextNoWrap="true"
                                SortKeySelector="c => c.Verificado" TextAlignment="Alignment.Center">
                        @(context.Verificado ? "Sim" : "Não")
                    </GridColumn>
                </GridColumns>
            </Grid>

        </div>
    </div>
    <FluentPaginator State="@pagination" />
} else {
    <div style="padding:10px">
        <p><em>Buscando dados...</em></p>
        <FluentProgress 
            Width="250px" 
            Stroke="@Microsoft.FluentUI.AspNetCore.Components.ProgressStroke.Small" />
    </div>
}

@code {

    string EntityNameSingular = "Registro de Trecho";
    string EntityNamePlural = "Registros de Trecho";
    string EntityPronoum = "os";

    string AddNewButtonText { get { return $"Adicionar nov{EntityPronoum} {EntityNameSingular}"; } }

    private IQueryable<Trecho_Registro>? items = default!;
    private IQueryable<Trecho>? itemsTrecho = default!;

    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };

    protected override async Task OnInitializedAsync() {
        await LoadDataAsync(false);
    }

    async Task LoadDataAsync(bool stateHasChanged = true) {
        var result = await itemService.GetAllAsync();
        items = result?.OrderByDescending(x => x.DataHora);

        var resultTrecho = await itemServiceTrecho.GetAllAsync();
        itemsTrecho = resultTrecho?.OrderByDescending(x => x.DataHoraInicio);

        if (stateHasChanged)
            StateHasChanged();
    }

    private async Task OnRowClick(GridRowEventArgs<Trecho_Registro> args) {
        await EditDialog(args.Item);
    }

    private async Task<DialogResult?> showAddDialog(Trecho_Registro item) {
        return await showDialog("Cadastrar", item);
    }

    private async Task<DialogResult?> showEditDialog(Trecho_Registro item) {
        return await showDialog("Editar", item);
    }

    private async Task<DialogResult?> showDialog(string addOrEdit, Trecho_Registro item) {
        var parameters = new DialogParameters {
                Title = $"{addOrEdit} {EntityNameSingular}",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await dialogService.ShowDialogAsync<Trechos_Registros.EditPanel>(item, parameters);

        return await dialog.Result;

    }
    private async void showErrorMessageAsync(Exception ex) {
        await dialogService.ShowErrorAsync("Error: ", ex.InnerException?.Message ?? ex.Message);
    }

    private async Task AddDialog() {

        var dialogResult = await showAddDialog(new Trecho_Registro());
        if (dialogResult == null || dialogResult.Cancelled) { return; }

        if (dialogResult.Data is not null) {
            var newItem = dialogResult.Data as Trecho_Registro;
            if (newItem is null) { return; }

            try {
                await itemService.SaveAsync(newItem);
                await LoadDataAsync();
            } catch (Exception ex) {
                showErrorMessageAsync(ex);
            }
        }
    }


    private async Task EditDialog(Trecho_Registro originalItem) {

        var dialogResult = await showEditDialog(originalItem.DeepCopy());
        if (dialogResult == null || dialogResult.Cancelled || dialogResult.Data is null) {
            return; 
        }

        if (dialogResult.Data.GetType() == typeof(Guid)) {
            await DeleteItem(originalItem);
            return;
        }

        var updatedItem = dialogResult.Data as Trecho_Registro;
        if (updatedItem is null) {
            return;
        }

        // Take the data from the "edited" item and put it into the original item
        originalItem.TrechoId = updatedItem.TrechoId;
        originalItem.DataHora = updatedItem.DataHora;
        originalItem.DistanciaMM = updatedItem.DistanciaMM;
        originalItem.Coordenada = updatedItem.Coordenada;
        originalItem.StatusEnvioAPI = updatedItem.StatusEnvioAPI;
        originalItem.Verificado = updatedItem.Verificado;

        try {
            await itemService.SaveAsync(originalItem, originalItem.Id);
            await LoadDataAsync();
        } catch (Exception ex) {
            showErrorMessageAsync(ex);
        }
    }


    private async Task DeleteItem(Trecho_Registro item) {

        IDialogReference dialog = await dialogService.ShowConfirmationAsync(
                $"Tem certeza de que deseja deletar {EntityPronoum} {EntityNameSingular.ToLower()} registrado em: '{item.DataHora?.ToString("dd/MM/yyyy HH:mm:ssh")}'?",
            "Sim", "Não", $"Deletar {EntityNameSingular}?"
        );

        DialogResult result = await dialog.Result;
        if (result.Cancelled) { return; }

        try {
            await itemService.DeleteAsync(item.Id);
            await LoadDataAsync();
        } catch (Exception ex) {
            showErrorMessageAsync(ex);
        }
    }

}
