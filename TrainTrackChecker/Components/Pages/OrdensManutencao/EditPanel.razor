@implements IDialogContentComponent<OrdemManutencao>
@using System.ComponentModel.DataAnnotations
@inject IToastService ToastService

<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        @if (Content.Id == default) {
            <FluentIcon Value="@(new Icons.Regular.Size24.Add())" />
        } else {
            <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" />
        }
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>

    <EditForm EditContext="@_editContext" FormName="@typeof(OrdemManutencao).Name" >

        <DataAnnotationsValidator />

        <FluentStack
            Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" 
            HorizontalAlignment="HorizontalAlignment.Stretch">
            @if (Content.Id != default) {
                <FluentNumberField @bind-Value="@Content.Codigo" Appearance="FluentInputAppearance.Filled" ReadOnly="true" Label="Codigo" />
            }
            <FluentSelect Label="  Status" Required Items=@intStatusOptions TOption="Option<int>"
              OptionText="@(i => i.Text)" OptionValue="@(i => i.Value.ToString())"
                @bind-Value="@intStatusSelectedValue" 
            />

            <FluentDatePicker Label="  Data" Required Style="@style"
                              @bind-Value="@Content.DataHora" />
            <FluentTimePicker Label="  Hora" Required
                              @bind-Value="@hora" />

            <FluentTextField Label="  Obs. Gerente" Style="@style"
                             @bind-Value="@Content.ObsGerente" />
            <FluentTextField Label="  Obs. Operador" Style="@style"
                             @bind-Value="@Content.ObsOperador" />

        </FluentStack>

        <FluentValidationSummary Style="font-size: 14px; padding-top:20px; color: var(--error);" />

    </EditForm>

</FluentDialogBody>


<hr />
<FluentDialogFooter Visible="false"/>

<FluentStack HorizontalAlignment="HorizontalAlignment.End">
    @if (Content.Id != default) {
        <FluentButton Appearance="Appearance.Neutral" OnClick="DeleteAsync">
            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Error" Slot="start" />
            Deletar
        </FluentButton>
    }
    <FluentButton Appearance="Appearance.Neutral"
                    IconStart="@(new Icons.Regular.Size20.ArrowCircleLeft())"
                    OnClick="@CancelAsync" >Cancelar</FluentButton>

    <FluentButton Appearance="Appearance.Accent"
                    IconStart="@(new Icons.Regular.Size20.Save())"
                    OnClick="@SaveAsync" >Salvar</FluentButton>
</FluentStack>
<FluentToastProvider MaxToastCount="10" Position="ToastPosition.TopCenter" />

@* Keyboard space *@
<div style="padding-bottom: 300px;"/>


@code {

    DateTime? hora { get; set; }

    string intStatusSelectedValue = "0";
    List<Option<int>> intStatusOptions = new() {
        { new Option<int> { Value = 0, Text = OrdemManutencaoStatus.Cadastrada.ToString() } },
        { new Option<int> { Value = 1, Text = OrdemManutencaoStatus.Aguardando.ToString() } },
        { new Option<int> { Value = 2, Text = OrdemManutencaoStatus.Realizada.ToString() } },
        { new Option<int> { Value = 3, Text = Helpers.EnumToFormattedText(OrdemManutencaoStatus.NãoRealizada.ToString()) } }
    };

    private EditContext _editContext = default!;

    protected override void OnInitialized() {
        _editContext = new EditContext(Content);
        intStatusSelectedValue = ((int)Content.Status).ToString();
        hora = Content.DataHora;
    }

    [Parameter]
    public OrdemManutencao Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private async Task SaveAsync() {

        if (_editContext.Validate()) {
            Content.DataHora = Helpers.JoinDateTime(Content.DataHora, hora);
            Content.Status = (OrdemManutencaoStatus)Enum.ToObject(typeof(OrdemManutencaoStatus), Convert.ToInt32(intStatusSelectedValue));
            Content.User = null;
            Content.UserId = null;
            await Dialog.CloseAsync(Content);
        } else {
            ToastService.ShowWarning("Por favor verifique os campos assinalados em vermelho.");
        }
    }

    private async Task DeleteAsync() {
        await Dialog.CloseAsync(Content.Id);
    }

    private async Task CancelAsync() {
        await Dialog.CancelAsync(); 
    }

    const string style = "margin-top: -10px; margin-bottom: 10px;";

}