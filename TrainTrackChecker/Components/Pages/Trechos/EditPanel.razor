@implements IDialogContentComponent<Trecho>
@using System.ComponentModel.DataAnnotations
@inject IToastService ToastService
@inject IApiService<Trecho> itemServiceTrecho
@inject IApiService<Hardware> itemServiceHardware

<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        @if (Content.Id == default) {
            <FluentIcon Value="@(new Icons.Regular.Size24.Add())" />
        } else {
            <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" />
        }
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>

    <EditForm EditContext="@_editContext" FormName="@typeof(Trecho).Name" >

        <DataAnnotationsValidator />

        <FluentStack
            Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" 
            HorizontalAlignment="HorizontalAlignment.Stretch">

            @if (Content.Id != default) {
                <FluentNumberField @bind-Value="@Content.Codigo" Appearance="FluentInputAppearance.Filled" ReadOnly="true" Label="Codigo" />
            }

            <FluentAutocomplete TOption="Hardware"
                                Width="100%"
                                Placeholder="Selecione um Hardware"
                                OnOptionsSearch="@OnSearch"
                                MaximumSelectedOptions="1"
                                KeepOpen="true"
                                @bind-SelectedOptions="@acHardware_SelectedItems"
                                OptionText="@(item => item.Codigo + " - " + item.Nome)"
                                OptionStyle="min-height: 40px;">
                <FooterContent Context="acContext">
                    @if (itemsHardware.Any() == false) {
                        <FluentLabel Style="font-size: 12px; text-align: center; width: 300px;">
                            Nenhum hardware econtrado
                        </FluentLabel>
                    }
                </FooterContent>
            </FluentAutocomplete>
            
            <FluentDatePicker Label="  Data de Início" Style="@style"
                              @bind-Value="@Content.DataHoraInicio" />
            <FluentTimePicker Label="Hora de Início" Required
                              @bind-Value="@horaInicio" />

            <FluentDatePicker Label="  Data de Fim" Required Style="@style"
                              @bind-Value="@Content.DataHoraFim" />
            <FluentTimePicker Label="Hora de Fim" Required
                              @bind-Value="@horaFim" />

            <FluentSwitch Label="  Verificado"
                          @bind-Value=@Content.Verificado />
        </FluentStack>

        <FluentValidationSummary Style="font-size: 14px; padding-top:20px; color: var(--error);" />

    </EditForm>

</FluentDialogBody>


<hr />
<FluentDialogFooter Visible="false"/>

<FluentStack HorizontalAlignment="HorizontalAlignment.End">
    @if (Content.Id != default) {
        <FluentButton Appearance="Appearance.Neutral" OnClick="DeleteAsync">
            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Error" Slot="start" />
            Deletar
        </FluentButton>
    }
    <FluentButton Appearance="Appearance.Neutral"
                    IconStart="@(new Icons.Regular.Size20.ArrowCircleLeft())"
                    OnClick="@CancelAsync" >Cancelar</FluentButton>

    <FluentButton Appearance="Appearance.Accent"
                    IconStart="@(new Icons.Regular.Size20.Save())"
                    OnClick="@SaveAsync" >Salvar</FluentButton>
</FluentStack>
<FluentToastProvider MaxToastCount="10" Position="ToastPosition.TopCenter" />

@* Keyboard space *@
<div style="padding-bottom: 300px;"/>


@code
{

    DateTime? horaInicio { get; set; }
    DateTime? horaFim { get; set; }



    IEnumerable<Hardware> acHardware_SelectedItems = Array.Empty<Hardware>();

    private IQueryable<Hardware> itemsHardware = default!;

    private void OnSearch(OptionsSearchEventArgs<Hardware> e) {
        e.Items = itemsHardware?.Where(i => i.Nome.Contains(e.Text, StringComparison.OrdinalIgnoreCase) ||
                                         i.NumeroSerie.Contains(e.Text, StringComparison.OrdinalIgnoreCase))
                         .OrderBy(i => i.Nome);
    }

    private EditContext _editContext = default!;

    protected override async Task OnInitializedAsync() {
        _editContext = new EditContext(Content);
        var resultHardware = await itemServiceHardware.GetAllAsync();
        itemsHardware = resultHardware?.OrderByDescending(x => x.Nome) ?? default!;

        if(Content.Hardware is not null)
            acHardware_SelectedItems = new List<Hardware>() {
                Content.Hardware
            };

        horaInicio = Content.DataHoraInicio;
        horaFim = Content.DataHoraFim;

    }

    [Parameter]
    public Trecho Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private async Task SaveAsync() {

        if (_editContext.Validate() && acHardware_SelectedItems.Any()!) {

            Content.DataHoraInicio = Helpers.JoinDateTime(Content.DataHoraInicio, horaInicio);
            Content.DataHoraFim = Helpers.JoinDateTime(Content.DataHoraFim, horaFim);

            var hardware = acHardware_SelectedItems.First();
            Content.Hardware = null;
            Content.HardwareId = hardware.Id;
            Content.NumeroSerieHardware = hardware.NumeroSerie;
            await Dialog.CloseAsync(Content);
        } else {
            ToastService.ShowWarning("Por favor verifique os campos assinalados em vermelho.");
        }
    }

    private async Task DeleteAsync() {
        await Dialog.CloseAsync(Content.Id);
    }

    private async Task CancelAsync() {
        await Dialog.CancelAsync(); 
    }

    const string style = "margin-top: -10px; margin-bottom: 10px;";

}